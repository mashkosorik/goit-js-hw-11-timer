{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","minutes","seconds","Timer","constructor","startTime","stopTime","deltaTime","interval","pad","value","String","padStart","getDays","time","Math","floor","getHours","getMins","getSecs","updateClockFace","textContent","updateDate","currentTime","Date","now","parse","start","setInterval","stop","clearInterval","timer"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,QAASH,SAASC,cAAc,uBAChCG,QAASJ,SAASC,cAAc,wBAGlC,MAAMI,EACJC,YAAYC,EAAWC,GAChBD,KAAAA,UAAYA,EACZC,KAAAA,SAAWA,EACXC,KAAAA,UAAY,EACZC,KAAAA,SAAW,GAGlBC,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,GAGnCC,QAAQC,GACC,OAAA,KAAKL,IAAIM,KAAKC,MAAMF,EAAO,IAAO,GAAK,GAAK,KAErDG,SAASH,GACA,OAAA,KAAKL,IAAIM,KAAKC,MAAOF,EAAQ,MAAyB,OAE/DI,QAAQJ,GACC,OAAA,KAAKL,IAAIM,KAAKC,MAAOF,EAAQ,KAAoB,MAG1DK,QAAQL,GACC,OAAA,KAAKL,IAAIM,KAAKC,MAAOF,EAAQ,IAAc,MAGpDM,gBAAgBN,GACVA,GACFlB,EAAKC,KAAKwB,YAAc,KAAKR,QAAQC,GACrClB,EAAKI,MAAMqB,YAAc,KAAKJ,SAASH,GACvClB,EAAKK,QAAQoB,YAAc,KAAKH,QAAQJ,GACxClB,EAAKM,QAAQmB,YAAc,KAAKF,QAAQL,KAExClB,EAAKC,KAAKwB,YAAc,KACxBzB,EAAKI,MAAMqB,YAAc,KACzBzB,EAAKK,QAAQoB,YAAc,KAC3BzB,EAAKM,QAAQmB,YAAc,MAI/BC,aACMC,IAAAA,EAAcC,KAAKC,MAClBlB,KAAAA,UAAYiB,KAAKE,MAAM,KAAKpB,UAAYiB,EACxCH,KAAAA,gBAAgB,KAAKb,WAG5BoB,QACOnB,KAAAA,SAAWoB,YAAY,KACrBN,KAAAA,cACJ,KAELO,OACEC,cAAc,KAAKtB,UACdY,KAAAA,mBAIT,MAAMW,EAAQ,IAAI5B,EAAMqB,KAAKC,MAAO,wBACpCM,EAAMT,aACNS,EAAMJ","file":"src.f3d5e6ca.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  minutes: document.querySelector('[data-value=\"mins\"]'),\n  seconds: document.querySelector(\"[data-value='secs']\"),\n};\n\nclass Timer {\n  constructor(startTime, stopTime) {\n    this.startTime = startTime;\n    this.stopTime = stopTime;\n    this.deltaTime = 0;\n    this.interval = '';\n  }\n\n  pad(value) {\n    return String(value).padStart(2, 0);\n  }\n\n  getDays(time) {\n    return this.pad(Math.floor(time / 1000 / 60 / 60 / 24));\n  }\n  getHours(time) {\n    return this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  }\n  getMins(time) {\n    return this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  }\n\n  getSecs(time) {\n    return this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  }\n\n  updateClockFace(time) {\n    if (time) {\n      refs.days.textContent = this.getDays(time);\n      refs.hours.textContent = this.getHours(time);\n      refs.minutes.textContent = this.getMins(time);\n      refs.seconds.textContent = this.getSecs(time);\n    } else {\n      refs.days.textContent = '00';\n      refs.hours.textContent = '00';\n      refs.minutes.textContent = '00';\n      refs.seconds.textContent = '00';\n    }\n  }\n\n  updateDate() {\n    let currentTime = Date.now();\n    this.deltaTime = Date.parse(this.stopTime) - currentTime;\n    this.updateClockFace(this.deltaTime);\n  }\n\n  start() {\n    this.interval = setInterval(() => {\n      this.updateDate();\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.interval);\n    this.updateClockFace();\n  }\n}\n\nconst timer = new Timer(Date.now(), '31 dec 2021 23:59:59');\ntimer.updateDate();\ntimer.start();\n"]}